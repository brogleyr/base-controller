// src/aiskills/aiskills.service.ts
import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { lastValueFrom } from 'rxjs';
import { SisService } from '../sis/sis.service';
import { CourseService } from '../courses/course.service'; 
import { TranscriptDto } from '../dtos/transcript.dto';

@Injectable()
export class AiSkillsService {
  constructor(
    private readonly httpService: HttpService,
    private readonly configService: ConfigService,
    private readonly sisService: SisService,
    private readonly courseService: CourseService 
  ) {}

  private formatTranscript(transcript: any): string {
  const studentInfo = `
Student: ${transcript.studentFullName}
Program: ${transcript.program}
GPA (Weighted/Unweighted): ${transcript.gpa} / ${transcript.gpaUnweighted}
Class Rank: ${transcript.classRank}

Transcript Course Information:
`;

  let terms = transcript.terms;

  if (typeof terms === "string") {
    try {
      terms = JSON.parse(terms);
    } catch (error) {
      console.error("Failed to parse transcript terms:", error);
      return studentInfo + "\nInvalid terms format.";
    }
  }

  if (!Array.isArray(terms)) {
    return studentInfo + "\nNo terms or courses found.";
  }

  const courseBlocks = terms
    .map((term: any) => {
      if (!Array.isArray(term.courses)) {
        return `\nNo courses found for term ${term.termYear}.`;
      }

      return term.courses
        .map((course: any) => {
          const courseInfo = this.courseService.getCourseInfo(
            course.courseTitle,
            course.courseCode
          );

          if (courseInfo.error) {
            return ` 
Course Title: ${course.courseTitle}
Course Code: ${course.courseCode}
Error: ${courseInfo.error}
`;
          }

          const techSkills = Array.isArray(courseInfo.technologicalSkills)
            ? courseInfo.technologicalSkills.join(", ")
            : "None";
          const skills = Array.isArray(courseInfo.skills)
            ? courseInfo.skills.join(", ")
            : "None";
          const abilities = Array.isArray(courseInfo.abilities)
            ? courseInfo.abilities.join(", ")
            : "None";

          return `
Course Title: ${course.courseTitle}
Course Code: ${course.courseCode}
Description: ${courseInfo.description}

||Predicted Technical Skills||: ${techSkills}
||Predicted Skills||: ${skills}
||Predicted Abilities||: ${abilities}
`;
        })
        .join("\n");
    })
    .join("\n");

  return studentInfo + courseBlocks;
}

  async getTranscriptAndSendToAI(studentNumber: string): Promise<string> {
    console.log(`Fetching transcript for student number: ${studentNumber}`);

    const transcript: TranscriptDto = await this.sisService.getStudentTranscript(studentNumber);
    if (!transcript) {
      throw new Error('Transcript not found');
    }

    // Format the transcript using the formatTranscript method
    const transcriptFormatted = this.formatTranscript(transcript);
    const prompt = `
###Step 1, Understand the objective
A college student requires a list of technical skills, skills, and abilities which they have listed for them, based on their college courses description from the transcript. Along with that, you will be provided with ||possibly correct|| prediction of another system which is of lower accuracy than you, you are free to use them, insure that the the technical skills, skill, and abilities actually logically match the courses and real abilities of the student.

###Step 2, understand the format
Your output format must be concise and without redundant text, simply list the technical skills, skills, and abilities. In detail, you must first print “technical skills”, underneath print all of the technical skills the student possesses, then print “skills” on the next line, similarly print all skills the student possesses, then “abilities”, and print the abilities the student possesses. Example is provided below.

###Step 3, analyze the student data
The information about the student is provided below, the structure is as follows. You will be provided with the course title, course code, course description (||Some learning outcomes are included in some description||) and the approximated technical skills, skills, and abilities generated by a simpler model than you (as mentioned before). Information is below:

${transcriptFormatted}

###Step 4, Generate the response, ||according to the provided format in “###Step 2, understand the format”||
`;

    
    console.log("\n=== GENERATED PROMPT ===");
    console.log(prompt);
    console.log("=== END OF PROMPT ===\n");
    console.log(transcriptFormatted);

    // Send the prompt to OpenAI
    const response = await this.sendPromptToOpenAI(prompt);
    return response;
  }

  private async sendPromptToOpenAI(prompt: string): Promise<string> {
    const apiKey = this.configService.get<string>('OPENAI_API_KEY');
    const openaiUrl = 'https://api.openai.com/v1/chat/completions';

    const response = await lastValueFrom(
      this.httpService.post(
        openaiUrl,
        {
          model: "gpt-4o-mini",
          messages: [{ role: 'system', content: "Follow the instructions, any statement in double bars, eg. ||||, is of high importance and you must attend to that piece of information within." }, { role: 'user', content: prompt }]
        },
        {
          headers: {
            Authorization: `Bearer ${apiKey}`,
          },
        }
      )
    );

    const result = response.data.choices[0].message.content;
    console.log("OpenAI response:", result);
    return result;
  }
}